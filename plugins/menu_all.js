const config = require('../settings');
const moment = require('moment-timezone');
const { malvin, commands } = require('../malvin');
const { runtime } = require('../lib/functions');
const os = require('os');
const { getPrefix } = require('../lib/prefix');

// Tiny caps converter
const toTinyCaps = (text) => {
    const tinyCapsMap = {
        a: '·¥Ä', b: ' ô', c: '·¥Ñ', d: '·¥Ö', e: '·¥á', f: '“ì', g: '…¢', h: ' ú', i: '…™',
        j: '·¥ä', k: '·¥ã', l: ' ü', m: '·¥ç', n: '…¥', o: '·¥è', p: '·¥ò', q: '«´', r: ' Ä',
        s: 's', t: '·¥õ', u: '·¥ú', v: '·¥†', w: '·¥°', x: 'x', y: ' è', z: '·¥¢'
    };
    return text.toLowerCase().split('').map(c => tinyCapsMap[c] || c).join('');
};

malvin({
    pattern: 'menu2',
    alias: ['allmenu'],
    desc: 'Show all bot commands',
    category: 'menu',
    react: '‚ö°Ô∏è',
    filename: __filename
}, async (malvin, mek, m, { from, sender, reply }) => {
    try {
        const prefix = getPrefix();
        const timezone = config.TIMEZONE || 'Africa/Nairobi';
        const time = moment().tz(timezone).format('HH:mm:ss');
        const date = moment().tz(timezone).format('dddd, DD MMMM YYYY');

        // Menu header with tiny caps
        let menu = `
‚ï≠‚ïê‚ú¶„Äî ü§ñ *${toTinyCaps(config.BOT_NAME || 'Malvin Bot')}* „Äï‚ú¶‚ïê‚ïÆ
‚îÇ
‚îÇ üë§ ${toTinyCaps('User')}: @${sender.split('@')[0]}
‚îÇ ‚è∞ ${toTinyCaps('Time')}: ${time}
‚îÇ üìÖ ${toTinyCaps('Date')}: ${date}
‚îÇ üîÑ ${toTinyCaps('Runtime')}: ${runtime(process.uptime())}
‚îÇ ‚öôÔ∏è ${toTinyCaps('Mode')}: ${config.MODE || 'Public'}
‚îÇ üì° ${toTinyCaps('Platform')}: ${os.platform()}
‚îÇ ‚å®Ô∏è ${toTinyCaps('Prefix')}: [ ${prefix} ]
‚îÇ üß© ${toTinyCaps('Plugins')}: ${commands.length}
‚îÇ üëë ${toTinyCaps('Dev')}: ${config.OWNER_NAME || toTinyCaps('Malvin-Tech')}
‚îÇ üöÄ ${toTinyCaps('Version')}: ${config.version || '1.0.0'}
‚îÇ
‚ï∞‚ïê‚ú™‚ïæ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚ïº‚ú™‚ïê‚ïØ
`;

        // Group commands by category
        const categories = {};
        for (const cmd of commands) {
            if (cmd.category && !cmd.dontAdd && cmd.pattern) {
                categories[cmd.category] = categories[cmd.category] || [];
                categories[cmd.category].push(cmd.pattern.split('|')[0]);
            }
        }

        // Add sorted categories with tiny caps
        for (const cat of Object.keys(categories).sort()) {
            menu += `\n\n‚ï≠‚ïê‚ú¶„Äî ${toTinyCaps(cat)} ${toTinyCaps('Menu')} „Äï‚ú¶‚ïê‚ïÆ\n`;
            for (const cmd of categories[cat].sort()) {
                menu += `‚îÇ ‚û∏ ${prefix}${cmd}\n`;
            }
            menu += `‚ï∞‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`;
        }

        menu += `\n\n> ${config.DESCRIPTION || toTinyCaps('Explore the bot commands!')}`;

        // Context info for image message
        const imageContextInfo = {
            mentionedJid: [sender],
            forwardingScore: 999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterJid: config.NEWSLETTER_JID || '120363402507750390@newsletter',
                newsletterName: config.OWNER_NAME || toTinyCaps('Malvin Tech'),
                serverMessageId: 143
            }
        };

        // Send menu image
        await malvin.sendMessage(
            from,
            {
                image: { url: config.MENU_IMAGE_URL || 'https://files.catbox.moe/qumhu4.jpg' },
                caption: menu,
                contextInfo: imageContextInfo
            },
            { quoted: mek }
        );

        // Send audio if configured
        if (config.MENU_AUDIO_URL) {
            await new Promise(resolve => setTimeout(resolve, 1000));
            await malvin.sendMessage(
                from,
                {
                    audio: { url: config.MENU_AUDIO_URL },
                    mimetype: 'audio/mp4',
                    ptt: true,
                    contextInfo: {
                        mentionedJid: [sender],
                        forwardingScore: 999,
                        isForwarded: true,
                        forwardedNewsletterMessageInfo: {
                            newsletterName: config.OWNER_NAME || toTinyCaps('Malvin Tech'),
                            serverMessageId: 143
                        }
                    }
                },
                { quoted: mek }
            );
        }

    } catch (e) {
        console.error('Menu Error:', e.message);
        await reply(`‚ùå ${toTinyCaps('Error')}: Failed to show menu. Try again.\n${toTinyCaps('Details')}: ${e.message}`);
    }
});