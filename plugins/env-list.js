const fs = require('fs');
const path = require('path');
const { malvin } = require('../malvin');
const config = require('../settings');

// Helper to convert "true"/"false" strings to actual boolean
function convertToBool(text, trueValue = 'true') {
    return text === trueValue;
}

// Convert config values to booleans where applicable
const booleanConfigKeys = [
    'AUTO_STATUS_SEEN', 'AUTO_STATUS_REPLY', 'AUTO_STATUS_REACT',
    'AUTO_REPLY', 'AUTO_STICKER', 'CUSTOM_REACT', 'AUTO_REACT',
    'DELETE_LINKS', 'ANTI_LINK', 'ANTI_BAD_WORD', 'AUTO_TYPING',
    'AUTO_RECORDING', 'ALWAYS_ONLINE', 'PUBLIC_MODE', 'READ_MESSAGE'
];

function generateSettingsList() {
    const settingsList = [
        { name: 'status view', key: 'AUTO_STATUS_SEEN', emoji: 'üëÅÔ∏è' },
        { name: 'status reply', key: 'AUTO_STATUS_REPLY', emoji: 'üí¨' },
        { name: 'status react', key: 'AUTO_STATUS_REACT', emoji: 'ü§©' },
        { name: 'status reply msg', key: 'AUTO_STATUS_MSG', emoji: 'üí≠', isText: true },
        { name: 'auto reply', key: 'AUTO_REPLY', emoji: '‚Ü©Ô∏è' },
        { name: 'auto sticker', key: 'AUTO_STICKER', emoji: 'üñºÔ∏è' },
        { name: 'custom reacts', key: 'CUSTOM_REACT', emoji: 'üëç' },
        { name: 'auto react', key: 'AUTO_REACT', emoji: 'üí•' },
        { name: 'delete links', key: 'DELETE_LINKS', emoji: 'üîó' },
        { name: 'anti-link', key: 'ANTI_LINK', emoji: 'üö´' },
        { name: 'anti-bad words', key: 'ANTI_BAD_WORD', emoji: 'üõë' },
        { name: 'auto typing', key: 'AUTO_TYPING', emoji: '‚å®Ô∏è' },
        { name: 'auto recording', key: 'AUTO_RECORDING', emoji: 'üéôÔ∏è' },
        { name: 'always online', key: 'ALWAYS_ONLINE', emoji: 'üåê' },
        { name: 'public mode', key: 'PUBLIC_MODE', emoji: 'üåç' },
        { name: 'read message', key: 'READ_MESSAGE', emoji: 'üìñ' },
    ];

    return settingsList.map(s => {
        if (s.isText) {
            return `‚îú ${s.emoji} *${s.name}*: ${config[s.key] || 'not set'}`;
        }
        const value = convertToBool(config[s.key]);
        return `‚îú ${s.emoji} *${s.name}*: ${value ? '‚úÖ enabled' : '‚ùå disabled'}`;
    }).join('\n');
}

malvin({
    pattern: 'env',
    alias: ['setting', 'allvar'],
    desc: 'view bot settings ‚öôÔ∏è',
    category: 'main',
    react: '‚öôÔ∏è',
    filename: __filename
}, async (malvin, mek, m, { from, reply }) => {
    try {
        await malvin.sendMessage(from, { react: { text: '‚è≥', key: m.key } });

        const settingsMessage = `
‚ï≠‚îÄ‚îÄ‚îÄ[ *·¥á…¥·¥† s·¥á·¥õ·¥õ…™…¥…¢s* ]‚îÄ‚îÄ‚îÄ
‚îÇ
‚îú * ô·¥è·¥õ*: ${config.BOT_NAME || 'malvin-xd'} ü§ñ
‚îú *·¥ò Ä·¥á“ì…™x*: ${config.PREFIX || '.'} üõ†Ô∏è
‚îú *·¥ç·¥è·¥Ö·¥á*: ${config.MODE || 'private'} üîí
‚îÇ
‚îú *s·¥á·¥õ·¥õ…™…¥…¢s*: ‚öôÔ∏è
${generateSettingsList()}
‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ[ *·¥ç·¥Ä ü·¥†…™…¥-x·¥Ö* ]‚îÄ‚îÄ‚îÄ
> *powered by malvin* ‚ô°`;

        const imageUrl = config.MENU_IMAGE_URL || 'https://files.catbox.moe/ebqp72.png';

        await malvin.sendMessage(from, {
            image: { url: imageUrl },
            caption: settingsMessage,
            contextInfo: {
                mentionedJid: [m.sender]
            }
        }, { quoted: mek });

        await malvin.sendMessage(from, { react: { text: '‚úÖ', key: m.key } });

    } catch (e) {
        console.error('‚ùå env error:', e);
        await reply('‚ùå error fetching settings');
        await malvin.sendMessage(from, { react: { text: '‚ùå', key: m.key } });
    }
});