const { malvin } = require("../malvin");
const config = require('../settings');

// Compatibility command
malvin({
  pattern: "compatibility",
  alias: ["friend", "fcheck"],
  desc: "Calculate the compatibility score between two users.",
  category: "fun",
  react: "üíñ",
  filename: __filename,
  use: "@tag1 @tag2",
}, async (malvin, mek, m, { args, reply }) => {
  try {
    if (!m.mentionedJid || m.mentionedJid.length < 2) {
      return reply("Please mention two users to calculate compatibility.\nUsage: `.compatibility @user1 @user2`");
    }

    let user1 = m.mentionedJid[0];
    let user2 = m.mentionedJid[1];
    const devJid = config.DEV ? `${config.DEV}@s.whatsapp.net` : null;

    // Random compatibility score between 1 and 1000
    let compatibilityScore = Math.floor(Math.random() * 1000) + 1;

    // Special max score if one user is the dev
    if (user1 === devJid || user2 === devJid) {
      compatibilityScore = 1000;
    }

    await malvin.sendMessage(mek.chat, {
      text: `üíñ Compatibility between @${user1.split('@')[0]} and @${user2.split('@')[0]}: ${compatibilityScore}/1000 üíñ`,
      mentions: [user1, user2],
    }, { quoted: mek });

  } catch (error) {
    console.error(error);
    reply(`‚ùå Error: ${error.message}`);
  }
});

// Aura command
malvin({
  pattern: "aura",
  desc: "Calculate aura score of a user.",
  category: "fun",
  react: "üíÄ",
  filename: __filename,
  use: "@tag",
}, async (malvin, mek, m, { reply }) => {
  try {
    if (!m.mentionedJid || m.mentionedJid.length < 1) {
      return reply("Please mention a user to calculate their aura.\nUsage: `.aura @user`");
    }

    let user = m.mentionedJid[0];
    const devJid = config.DEV ? `${config.DEV}@s.whatsapp.net` : null;

    // Random aura score between 1 and 1000
    let auraScore = Math.floor(Math.random() * 1000) + 1;

    if (user === devJid) {
      auraScore = 999999;
    }

    await malvin.sendMessage(mek.chat, {
      text: `üíÄ Aura of @${user.split('@')[0]}: ${auraScore}${user === devJid ? '+' : '/1000'} üóø`,
      mentions: [user],
    }, { quoted: mek });

  } catch (error) {
    console.error(error);
    reply(`‚ùå Error: ${error.message}`);
  }
});

// Magic 8-ball command
malvin({
  pattern: "8ball",
  desc: "Magic 8-Ball gives answers",
  category: "fun",
  react: "üé±",
  filename: __filename
}, async (malvin, mek, m, { q, reply }) => {
  if (!q) return reply("Ask a yes/no question! Example: .8ball Will I be rich?");

  const responses = [
    "Yes!", "No.", "Maybe...", "Definitely!", "Not sure.",
    "Ask again later.", "I don't think so.", "Absolutely!",
    "No way!", "Looks promising!"
  ];

  const answer = responses[Math.floor(Math.random() * responses.length)];
  reply(`üé± *Magic 8-Ball says:* ${answer}`);
});

// Compliment command
malvin({
  pattern: "compliment",
  desc: "Give a nice compliment",
  category: "fun",
  react: "üòä",
  filename: __filename,
  use: "@tag (optional)"
}, async (malvin, mek, m, { reply }) => {
  const compliments = [
    "You're amazing just the way you are! üíñ",
    "You light up every room you walk into! üåü",
    "Your smile is contagious! üòä",
    "You're a genius in your own way! üß†",
    "You bring happiness to everyone around you! ü•∞",
    "You're like a human sunshine! ‚òÄÔ∏è",
    "Your kindness makes the world a better place! ‚ù§Ô∏è",
    "You're unique and irreplaceable! ‚ú®",
    "You're a great listener and a wonderful friend! ü§ó",
    "Your positive vibes are truly inspiring! üí´",
    "You're stronger than you think! üí™",
    "Your creativity is beyond amazing! üé®",
    "You make life more fun and interesting! üéâ",
    "Your energy is uplifting to everyone around you! üî•",
    "You're a true leader, even if you don‚Äôt realize it! üèÜ",
    "Your words have the power to make people smile! üòä",
    "You're so talented, and the world needs your skills! üé≠",
    "You're a walking masterpiece of awesomeness! üé®",
    "You're proof that kindness still exists in the world! üíï",
    "You make even the hardest days feel a little brighter! ‚òÄÔ∏è"
  ];

  const randomCompliment = compliments[Math.floor(Math.random() * compliments.length)];
  const sender = `@${mek.sender.split("@")[0]}`;
  const mentionedUser = m.mentionedJid && m.mentionedJid[0] || (mek.quoted && mek.quoted.sender);
  const target = mentionedUser ? `@${mentionedUser.split("@")[0]}` : "";

  const message = mentionedUser
    ? `${sender} complimented ${target}:\nüòä *${randomCompliment}*`
    : `${sender}, you forgot to tag someone! But hey, here's a compliment for you:\nüòä *${randomCompliment}*`;

  await malvin.sendMessage(mek.chat, {
    text: message,
    mentions: [mek.sender, mentionedUser].filter(Boolean),
  }, { quoted: mek });
});

// Love test command
malvin({
  pattern: "lovetest",
  desc: "Check love compatibility between two users",
  category: "fun",
  react: "‚ù§Ô∏è",
  filename: __filename,
  use: "@tag1 @tag2"
}, async (malvin, mek, m, { args, reply }) => {
  if (args.length < 2) return reply("Tag two users! Example: .lovetest @user1 @user2");

  let user1 = args[0].replace("@", "") + "@s.whatsapp.net";
  let user2 = args[1].replace("@", "") + "@s.whatsapp.net";

  let lovePercent = Math.floor(Math.random() * 100) + 1; // 1-100

  const messages = [
    { range: [90, 100], text: "üíñ *A match made in heaven!* True love exists!" },
    { range: [75, 89], text: "üòç *Strong connection!* This love is deep and meaningful." },
    { range: [50, 74], text: "üòä *Good compatibility!* You both can make it work." },
    { range: [30, 49], text: "ü§î *It‚Äôs complicated!* Needs effort, but possible!" },
    { range: [10, 29], text: "üòÖ *Not the best match!* Maybe try being just friends?" },
    { range: [1, 9], text: "üíî *Uh-oh!* This love is as real as a Bollywood breakup!" }
  ];

  let loveMessage = messages.find(m => lovePercent >= m.range[0] && lovePercent <= m.range[1]).text;

  const message = `üíò *Love Compatibility Test* üíò\n\n‚ù§Ô∏è *@${user1.split("@")[0]}* + *@${user2.split("@")[0]}* = *${lovePercent}%*\n${loveMessage}`;

  await malvin.sendMessage(mek.chat, { text: message, mentions: [user1, user2] }, { quoted: mek });
});

// Emoji converter command
malvin({
  pattern: "emoji",
  desc: "Convert text into emoji form.",
  category: "fun",
  react: "üôÇ",
  filename: __filename,
  use: "<text>"
}, async (malvin, mek, m, { args, reply }) => {
  try {
    if (!args.length) return reply("Please provide some text to convert into emojis!");

    const emojiMapping = {
      "a": "üÖ∞Ô∏è", "b": "üÖ±Ô∏è", "c": "üá®Ô∏è", "d": "üá©Ô∏è", "e": "üá™Ô∏è", "f": "üá´Ô∏è",
      "g": "üá¨Ô∏è", "h": "üá≠Ô∏è", "i": "üáÆÔ∏è", "j": "üáØÔ∏è", "k": "üá∞Ô∏è", "l": "üá±Ô∏è",
      "m": "üá≤Ô∏è", "n": "üá≥Ô∏è", "o": "üÖæÔ∏è", "p": "üáµÔ∏è", "q": "üá∂Ô∏è", "r": "üá∑Ô∏è",
      "s": "üá∏Ô∏è", "t": "üáπÔ∏è", "u": "üá∫Ô∏è", "v": "üáªÔ∏è", "w": "üáºÔ∏è", "x": "üáΩÔ∏è",
      "y": "üáæÔ∏è", "z": "üáøÔ∏è",
      "0": "0Ô∏è‚É£", "1": "1Ô∏è‚É£", "2": "2Ô∏è‚É£", "3": "3Ô∏è‚É£", "4": "4Ô∏è‚É£", "5": "5Ô∏è‚É£",
      "6": "6Ô∏è‚É£", "7": "7Ô∏è‚É£", "8": "8Ô∏è‚É£", "9": "9Ô∏è‚É£", " ": "‚ê£"
    };

    const text = args.join(" ").toLowerCase();
    const emojiText = [...text].map(c => emojiMapping[c] || c).join("");

    await malvin.sendMessage(mek.chat, { text: emojiText }, { quoted: mek });

  } catch (error) {
    console.error(error);
    reply(`‚ùå Error: ${error.message}`);
  }
});
