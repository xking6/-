const { malvin } = require('../malvin');
const moment = require('moment-timezone');
const config = require('../settings');
const os = require('os');
const { runtime } = require('../lib/functions');

const botStartTime = Date.now();
const ALIVE_IMG = config.ALIVE_IMAGE || 'https://i.ibb.co/fYrXbwbf/malvin-xd.jpg';
const NEWSLETTER_JID = config.NEWSLETTER_JID || '120363402507750390@newsletter';
const AUDIO_URL = config.AUDIO_URL || 'https://files.catbox.moe/pjlpd7.mp3';

// Tiny caps mapping for lowercase letters
const tinyCapsMap = {
  a: '·¥Ä', b: ' ô', c: '·¥Ñ', d: '·¥Ö', e: '·¥á', f: '“ì', g: '…¢', h: ' ú', i: '…™',
  j: '·¥ä', k: '·¥ã', l: ' ü', m: '·¥ç', n: '…¥', o: '·¥è', p: '·¥ò', q: 'q', r: ' Ä',
  s: 's', t: '·¥õ', u: '·¥ú', v: '·¥†', w: '·¥°', x: 'x', y: ' è', z: '·¥¢'
};

// Function to convert string to tiny caps
const toTinyCaps = (str) => {
  return str
    .split('')
    .map((char) => tinyCapsMap[char.toLowerCase()] || char)
    .join('');
};

// Format status info with tiny caps
const formatStatusInfo = (pushname, harareTime, harareDate, runtimeHours, runtimeMinutes, runtimeSeconds, config) => `
‚ï≠‚îÄ‚îÄ„Äî üî• ·¥Ä ü…™·¥†·¥á s·¥õ·¥Ä·¥õ·¥ús ü•∞ „Äï‚îÄ‚îÄ
‚îÇ
‚îú‚îÄ üëã  ú…™, ${pushname} üôÉ
‚îÇ
‚îú‚îÄ ‚è∞ ·¥õ…™·¥ç·¥á: ${harareTime}
‚îú‚îÄ üìÜ ·¥Ö·¥Ä·¥õ·¥á: ${harareDate}
‚îú‚îÄ ‚è≥ ·¥ú·¥ò·¥õ…™·¥ç·¥á: ${runtimeHours}  ú Äs, ${runtimeMinutes} ·¥ç…™…¥s, ${runtimeSeconds} s·¥á·¥Ñs
‚îú‚îÄ üß©  Ä·¥Ä·¥ç ·¥ús·¥Ä…¢·¥á: ${(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)}·¥ç ô / ${Math.round(os.totalmem() / 1024 / 1024)}·¥ç ô
‚îÇ
‚îú‚îÄ üì¢ …¥·¥è·¥õ…™·¥Ñ·¥á:
‚îÇ   …™ ·¥Ä·¥ç …¥·¥è·¥õ  Ä·¥ás·¥ò·¥è…¥s…™ ô ü·¥á “ì·¥è Ä ·¥Ä…¥ è
‚îÇ   ·¥° ú·¥Ä·¥õs·¥Ä·¥ò·¥ò  ô·¥Ä…¥s ·¥õ ú·¥Ä·¥õ ·¥ç·¥Ä è ·¥è·¥Ñ·¥Ñ·¥ú Ä
‚îÇ   ·¥Ö·¥ú·¥á ·¥õ·¥è ·¥õ ú·¥á ·¥ús·¥Ä…¢·¥á ·¥è“ì ·¥õ ú…™s  ô·¥è·¥õ.
‚îÇ   ·¥ús·¥á …™·¥õ ·¥°…™s·¥á ü è ·¥Ä…¥·¥Ö ·¥Ä·¥õ  è·¥è·¥ú Ä ·¥è·¥°…¥  Ä…™s·¥ã ‚ö†Ô∏è
‚îÇ
‚îú‚îÄ üîó ${config.REPO}
‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ„Äî ü•∞ „Äï‚îÄ‚îÄ‚îÄ
> ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥ç·¥Ä ü·¥†…™…¥ x·¥Ö 
`.trim();

malvin({
  pattern: 'alive',
  alias: ['uptime', 'runtime'],
  desc: 'Check if the bot is active.',
  category: 'info',
  react: 'üöÄ',
  filename: __filename,
}, async (malvin, mek, m, { reply, from }) => {
  try {
    const pushname = m.pushName || 'User';
    const harareTime = moment().tz('Africa/Harare').format('HH:mm:ss');
    const harareDate = moment().tz('Africa/Harare').format('dddd, MMMM Do YYYY');
    const runtimeMilliseconds = Date.now() - botStartTime;
    const runtimeSeconds = Math.floor((runtimeMilliseconds / 1000) % 60);
    const runtimeMinutes = Math.floor((runtimeMilliseconds / (1000 * 60)) % 60);
    const runtimeHours = Math.floor(runtimeMilliseconds / (1000 * 60 * 60));

    if (!ALIVE_IMG || !ALIVE_IMG.startsWith('http')) {
      throw new Error('Invalid ALIVE_IMG URL. Please set a valid image URL.');
    }

    const statusInfo = formatStatusInfo(
      pushname,
      harareTime,
      harareDate,
      runtimeHours,
      runtimeMinutes,
      runtimeSeconds,
      config
    );

    await malvin.sendMessage(from, {
      image: { url: ALIVE_IMG },
      caption: statusInfo,
      contextInfo: {
        mentionedJid: [m.sender],
        forwardingScore: 999,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
          newsletterJid: NEWSLETTER_JID,
          newsletterName: toTinyCaps('üî• malvin xd ü•∞'),
          serverMessageId: 143,
        },
      },
    }, { quoted: mek });

    await malvin.sendMessage(from, {
      audio: { url: AUDIO_URL },
      mimetype: 'audio/mp4',
      ptt: true,
    }, { quoted: mek });

  } catch (error) {
    console.error('‚ùå Error in alive command:', error.message);
    const errorMessage = toTinyCaps(`
      An error occurred while processing the alive command.
      Error Details: ${error.message}
      Please report this issue or try again later.
    `).trim();
    return reply(errorMessage);
  }
});