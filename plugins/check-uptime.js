const { malvin } = require('../malvin');
const { runtime } = require('../lib/functions');
const config = require('../settings');

// Define uptime display styles with a modern, elegant look
const uptimeStyles = [
  // Style 1: Elegant Dashboard
  ({ uptime, startTime }) => `
üî• * ô·¥è·¥õ ·¥ú·¥ò·¥õ…™·¥ç·¥á ·¥Ö·¥Äs ú ô·¥è Ä·¥Ö* 
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚î†‚è±Ô∏è *·¥ú·¥ò·¥õ…™·¥ç·¥á*: ${uptime}

‚î†üìÖ *s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö*: ${startTime.toLocaleString('en-US', { dateStyle: 'medium', timeStyle: 'short' })}

‚î†‚úÖ *s·¥õ·¥Ä·¥õ·¥ús*: “ì·¥ú ü ü è ·¥è·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥·¥Ä ü

> ${config.DESCRIPTION || '·¥Ä·¥ç ·¥õ ú·¥á ·¥ã…™…¥…¢'}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
`,

  // Style 2: Sleek Card
  ({ uptime, startTime }) => `
‚îå‚îÄ‚îÄ‚î•* ô·¥è·¥õ ·¥ú·¥ò·¥õ…™·¥ç·¥á*‚îù‚îÄ‚îÄ‚îê
‚îÇ
‚îÇ üïí * Ä·¥ú…¥…¥…™…¥…¢*: ${uptime}
‚îÇ üìÜ *s…™…¥·¥Ñ·¥á*: ${startTime.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}
‚îÇ ‚ö° *s·¥õ·¥Ä·¥õ·¥ús*: ·¥Ä·¥Ñ·¥õ…™·¥†·¥á
‚îÇ
‚îî‚îÄ‚ü§ ${config.DESCRIPTION || '·¥ç·¥Ä ü·¥†…™…¥ x·¥Ö'}
`,
];

malvin({
  pattern: 'uptime',
  alias: ['runtime', 'up'],
  desc: 'Displays bot uptime in a modern, elegant format',
  category: 'main',
  react: '‚è±Ô∏è',
  filename: __filename,
}, async (malvin, mek, m, { from, reply }) => {
  try {
    // Calculate uptime and start time
    const uptime = runtime(process.uptime());
    const startTime = new Date(Date.now() - process.uptime() * 1000);

    // Select a random style
    const selectedStyle = uptimeStyles[Math.floor(Math.random() * uptimeStyles.length)]({ uptime, startTime });

    // Send the formatted message
    await malvin.sendMessage(from, {
      text: selectedStyle,
      contextInfo: {
        mentionedJid: [m.sender],
        forwardingScore: 999,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
        newsletterJid: config.NEWSLETTER_JID || '120363402507750390@newsletter',
          newsletterName: config.OWNER_NAME || 'Malvin-XD',
          serverMessageId: 143,
        },
      },
    }, { quoted: mek });

  } catch (error) {
    console.error('Uptime Error:', error);
    await reply(`‚ùå Oops! Something went wrong: ${error.message}`);
  }
});